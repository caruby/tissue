require File.dirname(__FILE__) + '/../../../helpers/test_case'
require 'jinx/helpers/validation'

class CollectionEventParametersTest < Test::Unit::TestCase
  include CaTissue::TestCase

  def setup
    super
    @scg = defaults.specimen_collection_group
    @spc = defaults.specimen
  end
  
  def test_specimen_inverse_integrity
    # A default CEP is added to a specimen.
    @spc.add_defaults
    cep = @spc.collection_event_parameters
    assert_same(@spc, cep.specimen, "#{cep} not added to #{@spc} event parameters")
  end
  
  def test_scg_inverse_integrity
    cep = @scg.collection_event_parameters
    assert_same(@scg, cep.specimen_collection_group, "#{cep} not added to #{@scg} event parameters")
  end
  
  def test_owner_conflict
    cep = CaTissue::SpecimenEventParameters.create_parameters(:collection, @scg)
    assert_raises(Jinx::ValidationError, "Conflict allowed") { cep.specimen = @spc }
  end
  
  def test_update_scg_cep
    assert_nothing_raised("#{@scg} not created") { database.create(@scg) }
    cep = @scg.collection_event_parameters
    assert_not_nil(cep, "Autogenerated #{@scg} CEP not found")
    assert_not_nil(cep.identifier, "Autogenerated #{@scg} CEP identifier not set")
    cep.collection_procedure = 'Lavage'
    logger.debug { "Updating autogenerated #{@scg.qp} CEP #{cep}..." }
    verify_save(cep)
  end
  
  def test_update_specimen_cep
    assert_nothing_raised("#{@spc} not created") { database.create(@spc) }
    cep = @spc.collection_event_parameters
    assert_not_nil(cep, "Autogenerated #{@spc} CEP not found")
    assert_not_nil(cep.identifier, "Autogenerated #{@spc} CEP identifier not set")
    cep.collection_procedure = 'Lavage'
    logger.debug { "Updating autogenerated #{@spc.qp} CEP #{cep}..." }
    verify_save(cep)
  end
end