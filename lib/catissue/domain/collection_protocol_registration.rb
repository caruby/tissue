require 'caruby/util/collection'

module CaTissue
  # import the Java class
  java_import('edu.wustl.catissuecore.domain.CollectionProtocolRegistration')

  # The CollectionProtocolRegistration domain class.
  class CollectionProtocolRegistration
    include Resource
    
    # caTissue alert - Bug #64: Some domain collection properties not initialized.
    # Initialize consent_tier_responses if necessary. 
    #
    # @return [Java::JavaUtil::Set] the responses
    def consent_tier_responses
      getConsentTierResponseCollection or (self.consent_tier_responses = Java::JavaUtil::LinkedHashSet.new)
    end

    # Returns whether the consent available flag is equal to the String 'true'. This method converts
    # the caTissue String to a Boolean.
    def consent_available
      getIsConsentAvailable == 'true'
    end

    # Sets the consent available flag to the specified value. A Boolean value is converted to a String.
    def consent_available=(value)
      value = value.to_s if value
      setIsConsentAvailable(value)
    end

    # Sets the consent available flag to the specified value. An Integer value is converted to a String.
    def protocol_participant_identifier=(value)
      value = value.to_s if value
      setProtocolParticipantIdentifier(value)
    end

    add_attribute_aliases("consented?".to_sym => :is_consent_available, :protocol => :collection_protocol,
      :participant_identifier => :protocol_participant_identifier, :consent_responses => :consent_tier_responses)

    set_secondary_key_attributes(:collection_protocol, :participant)

    set_alternate_key_attributes(:collection_protocol, :protocol_participant_identifier)

    add_attribute_defaults(:activity_status => 'Active')

    add_mandatory_attributes(:registration_date)

    # consent_tier_responses is a cascaded dependent but is not fetched
    add_dependent_attribute(:consent_tier_responses, :unfetched)

    # The CPR-CP association is bi-directional.
    set_attribute_inverse(:collection_protocol, :collection_protocol_registrations)

    # The CPR-Participant association is bi-directional.
    set_attribute_inverse(:participant, :collection_protocol_registrations)

    add_dependent_attribute(:specimen_collection_groups, :logical, :autogenerated)

    # CPR PPI is part of a key if it exists, but is optional.
    qualify_attribute(:protocol_participant_identifier, :optional)

    # caTissue alert -  Augment the standard metadata storable reference attributes to work around caTissue Bug #150:
    # Create CollectionProtocol in API ignores startDate.
    qualify_attribute(:registration_date, :update_only)

    # caTissue alert -  Augment the standard metadata storable reference attributes to work around caTissue Bug #63
    # that requires a SpecimenCollectionGroup with an identifier which references a CollectionProtocolRegistration
    # with an identifier to nevertheless hold extraneous CollectionProtocolRegistration content, including the CPR
    # collection protocol. The referenced CP should not itself cascade to its dependents. This is enforced by a
    # Catissue::Database work-around.
    #
    # caTissue alert - CPR fetches the associated CP. This is unnecessary for the predominant caRuby use case,
    # where the CP is known when the CPR is fetched. Don't mark the CP as fetched in the CPR metadata, since that
    # precipitates an unnecessary CP copy/match/merge into a fetched CPR.
    qualify_attribute(:collection_protocol)

    def initialize(params=nil)
      super
      # following line works around an obscure problem whereby CPR init could not call consent_tier_responses below;
      # TODO - verify that it is still necessary
      respond_to?(:consent_tier_responses)
      # work around caTissue Bug #64
      self.consent_tier_responses ||= Java::JavaUtil::LinkedHashSet.new
    end

    # Removes associations to this registration
    def delete
      participant.collection_registrations.delete(self) if participant
      protocol.registrations.delete(self) if protocol
    end

    # @return all specimens collected for this CollectionProtocolRegistration
    def specimens
      Flattener.new(specimen_collection_groups.map { |group| group.specimens })
    end

    private

    # Adds defaults as follows:
    # * The default registration date is the current time.
    # * The default PPI is a unique number.
    def add_defaults_local
      super
      self.registration_date ||= Java.now
      self.protocol_participant_identifier ||= Uniquifier.qualifier.to_s
    end
  end
end