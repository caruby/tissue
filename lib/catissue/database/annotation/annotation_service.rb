require 'caruby/util/inflector'
require 'caruby/database/persistence_service'
require 'caruby/util/uniquifier'

module CaTissue
  module Annotation
    # An AnnotationService queries and saves CaTissue annotations.
    class AnnotationService < CaRuby::PersistenceService
      # The IdGenerator calls the caTissue entity manager to create a new identifier for
      # an annotation.
      class IdGenerator
        # Creates a new IdGenerator with the given caTissue entity_manager.
        def initialize(entity_manager)
          super()
          @entity_manager = entity_manager
        end

        # Returns a new identifier for the given annotation object.
        def next_identifier(annotation)
          logger.debug { "Generating identifier for annotation #{annotation}..." }
          id = @entity_manager.get_next_identifier_for_entity(annotation.class.qp).to_i
          # work-around caTissue bug - use a high number that won't conflict with the autogenerated range
          # cf. https://cabig-kc.nci.nih.gov/Biospecimen/forums/viewtopic.php?f=19&t=404&sid=786325c9c46503529a2b64f0b66fed0a
          if id.nil? or id.zero? then
            id = Uniquifier.qualifier
            logger.warn("Entity manager did not create annotation identifier; using id #{id}.")
          end
          id
        end
      end

      # Creates an AnnotationService for the given CaTissue::Database, service name and options.
      #
      # Supported options include the following:
      # * :anchor - the required anchor class
      # * :integration_service - the required IntegrationService
      # * :entity_manager - the required EntityManager
      # * +version+ - the optional caTissue version identifier
      def initialize(database, service_name, options)
        super(service_name, Options.get(:version, options))
        @database = database
        @anchor_class = Options.get(:anchor, options)
        @integration_service = Options.get(:integration_service, options)
        entity_manager = Options.get(:entity_manager, options)
        @id_generator = IdGenerator.new(entity_manager)
      end

      # Query the given domain object obj with the given attribute path. The query result is
      # an array of CaRuby::Annotation objects. Overrides {CaRuby::PersistenceService#query} to
      # delegate to the caTissue integration service when the penultimate search class is this
      # AnnotationService anchor class, e.g.:
      #   query(CaTissue::SpecimenCollectionGroup.new(:name => 'Biobank_1_5'), :base_pathology_annotation)
      # or
      #   query(CaTissue::ReceivedEventParameters.new(:user => user), :specimen_collection_group, :base_pathology_annotation)
      def query(obj, *path)
        # delegate path[0...-1] to database unless path.length < 2
        return @database.query(obj, *path[0...-1]).map { |fetched| query(fetched, path[-1]) }.flatten unless path.length < 2
        return super unless @anchor_class === obj.class
        # fetch the anchor objects if necessary
        return @database.query(obj).map { |fetched| query(fetched, *path) }.flatten if obj.identifier.nil?
        # obj is an anchor with an identifier; make a template
        template = obj.copy(:identifier)
        # delegate to the integration service to find the anchor annotations
        @integration_service.query(template, *path)
      end

      # Augments the CaRuby::PersistenceService create method to handle caTissue annotation service peculiarities,
      # e.g. assigning an identifier since assignment is not done automatically as is the case with the default
      # application service.
      def create(annotation)
        annotation.identifier ||= @id_generator.next_identifier(annotation)
        super
        owner = annotation.owner
        @integration_service.associate(owner, annotation) if CaRuby::Annotatable === owner
        annotation
      end
    end
  end
end